# ca65 linker config for 256 KiB (2 Mbit) sfc file

# Physical areas of memory
MEMORY {
  # I usually reserve $000000-$00000F for local variables
  # allocated just below the .proc statement of a subroutine.
  # The rest is open for global variables.
  ZEROPAGE:   start =  $000010, size = $00F0;

  # Make sure to change BSS based on where you put
  # the stack and how big you expect it to get.
  # Unlike on the NES, we include shadow OAM in BSS here
  # because there's not as much of a benefit to having it
  # page-aligned.
  BSS:        start =  $000200, size = $1E00;
  BSS7E:      start =  $7E2000, size = $E000;
  BSS7F:      start =  $7F0000, size =$10000;

  # The fast ROM area starts at $808000.
  # It's mirrored into the slow ROM area.
  ROM0:       start =  $808000, size = $8000, fill = yes;
  ROM1:       start =  $818000, size = $8000, fill = yes;
  ROM2:       start =  $828000, size = $8000, fill = yes;
  ROM3:       start =  $838000, size = $8000, fill = yes;
  ROM4:       start =  $848000, size = $8000, fill = yes;
  ROM5:       start =  $858000, size = $8000, fill = yes;
  ROM6:       start =  $868000, size = $8000, fill = yes;
  ROM7:       start =  $878000, size = $8000, fill = yes;
  ROM8:       start =  $888000, size = $8000, fill = yes;
  ROM9:       start =  $898000, size = $8000, fill = yes;
  ROMA:       start =  $8A8000, size = $8000, fill = yes;
  ROMB:       start =  $8B8000, size = $8000, fill = yes;
  ROMC:       start =  $8C8000, size = $8000, fill = yes;
  ROMD:       start =  $8D8000, size = $8000, fill = yes;
  ROME:       start =  $8E8000, size = $8000, fill = yes;
  ROMF:       start =  $8F8000, size = $8000, fill = yes;

  ROM10:       start =  $908000, size = $8000, fill = yes;
  ROM11:       start =  $918000, size = $8000, fill = yes;
  ROM12:       start =  $928000, size = $8000, fill = yes;
  ROM13:       start =  $938000, size = $8000, fill = yes;
  ROM14:       start =  $948000, size = $8000, fill = yes;
  ROM15:       start =  $958000, size = $8000, fill = yes;
  ROM16:       start =  $968000, size = $8000, fill = yes;
  ROM17:       start =  $978000, size = $8000, fill = yes;
  ROM18:       start =  $988000, size = $8000, fill = yes;
  ROM19:       start =  $998000, size = $8000, fill = yes;
  ROM1A:       start =  $9A8000, size = $8000, fill = yes;
  ROM1B:       start =  $9B8000, size = $8000, fill = yes;
  ROM1C:       start =  $9C8000, size = $8000, fill = yes;
  ROM1D:       start =  $9D8000, size = $8000, fill = yes;
  ROM1E:       start =  $9E8000, size = $8000, fill = yes;
  ROM1F:       start =  $9F8000, size = $8000, fill = yes;

  # The sound processor has its own address space
  SPCZEROPAGE:start =    $0010, size = $00E0;
  SPCRAM:     start =    $0200, size = $FDC0;
}

# Logical areas code/data can be put into.
SEGMENTS {
  # Read-only areas for main CPU
  CODE:       load = ROM0, align = $100, type = ro;
  RODATA:     load = ROM0, align = $100, type = ro;
  SNESHEADER: load = ROM0, start = $80FFC0, type = ro;
  CODE1:      load = ROM1, align = $100, optional=yes, type = ro;
  RODATA1:    load = ROM1, align = $100, optional=yes, type = ro;
  CODE2:      load = ROM2, align = $100, optional=yes, type = ro;
  RODATA2:    load = ROM2, align = $100, optional=yes, type = ro;
  CODE3:      load = ROM3, align = $100, optional=yes, type = ro;
  RODATA3:    load = ROM3, align = $100, optional=yes, type = ro;
  CODE4:      load = ROM4, align = $100, optional=yes, type = ro;
  RODATA4:    load = ROM4, align = $100, optional=yes, type = ro;
  CODE5:      load = ROM5, align = $100, optional=yes, type = ro;
  RODATA5:    load = ROM5, align = $100, optional=yes, type = ro;
  CODE6:      load = ROM6, align = $100, optional=yes, type = ro;
  RODATA6:    load = ROM6, align = $100, optional=yes, type = ro;
  CODE7:      load = ROM7, align = $100, optional=yes, type = ro;
  RODATA7:    load = ROM7, align = $100, optional=yes, type = ro;
  CODE8:      load = ROM8, align = $100, optional=yes, type = ro;
  RODATA8:    load = ROM8, align = $100, optional=yes, type = ro;
  CODE9:      load = ROM9, align = $100, optional=yes, type = ro;
  RODATA9:    load = ROM9, align = $100, optional=yes, type = ro;
  CODEA:      load = ROMA, align = $100, optional=yes, type = ro;
  RODATAA:    load = ROMA, align = $100, optional=yes, type = ro;
  CODEB:      load = ROMB, align = $100, optional=yes, type = ro;
  RODATAB:    load = ROMB, align = $100, optional=yes, type = ro;
  CODEC:      load = ROMC, align = $100, optional=yes, type = ro;
  RODATAC:    load = ROMC, align = $100, optional=yes, type = ro;
  CODED:      load = ROMD, align = $100, optional=yes, type = ro;
  RODATAD:    load = ROMD, align = $100, optional=yes, type = ro;
  CODEE:      load = ROME, align = $100, optional=yes, type = ro;
  RODATAE:    load = ROME, align = $100, optional=yes, type = ro;
  CODEF:      load = ROMF, align = $100, optional=yes, type = ro;
  RODATAF:    load = ROMF, align = $100, optional=yes, type = ro;
  CODE10:      load = ROM10, align = $100, optional=yes, type = ro;
  RODATA10:    load = ROM10, align = $100, optional=yes, type = ro;  
  CODE11:      load = ROM11, align = $100, optional=yes, type = ro;
  RODATA11:    load = ROM11, align = $100, optional=yes, type = ro;
  CODE12:      load = ROM12, align = $100, optional=yes, type = ro;
  RODATA12:    load = ROM12, align = $100, optional=yes, type = ro;
  CODE13:      load = ROM13, align = $100, optional=yes, type = ro;
  RODATA13:    load = ROM13, align = $100, optional=yes, type = ro;
  CODE14:      load = ROM14, align = $100, optional=yes, type = ro;
  RODATA14:    load = ROM14, align = $100, optional=yes, type = ro;
  CODE15:      load = ROM15, align = $100, optional=yes, type = ro;
  RODATA15:    load = ROM15, align = $100, optional=yes, type = ro;
  CODE16:      load = ROM16, align = $100, optional=yes, type = ro;
  RODATA16:    load = ROM16, align = $100, optional=yes, type = ro;
  CODE17:      load = ROM17, align = $100, optional=yes, type = ro;
  RODATA17:    load = ROM17, align = $100, optional=yes, type = ro;
  CODE18:      load = ROM18, align = $100, optional=yes, type = ro;
  RODATA18:    load = ROM18, align = $100, optional=yes, type = ro;
  CODE19:      load = ROM19, align = $100, optional=yes, type = ro;
  RODATA19:    load = ROM19, align = $100, optional=yes, type = ro;
  CODE1A:      load = ROM1A, align = $100, optional=yes, type = ro;
  RODATA1A:    load = ROM1A, align = $100, optional=yes, type = ro;
  CODE1B:      load = ROM1B, align = $100, optional=yes, type = ro;
  RODATA1B:    load = ROM1B, align = $100, optional=yes, type = ro;
  CODE1C:      load = ROM1C, align = $100, optional=yes, type = ro;
  RODATA1C:    load = ROM1C, align = $100, optional=yes, type = ro;
  CODE1D:      load = ROM1D, align = $100, optional=yes, type = ro;
  RODATA1D:    load = ROM1D, align = $100, optional=yes, type = ro;
  CODE1E:      load = ROM1E, align = $100, optional=yes, type = ro;
  RODATA1E:    load = ROM1E, align = $100, optional=yes, type = ro;
  CODE1F:      load = ROM1F, align = $100, optional=yes, type = ro;
  RODATA1F:    load = ROM1F, align = $100, optional=yes, type = ro;
  
  # Read-only areas for sound CPU
  SPCIMAGE:   load = ROM7, run=SPCRAM, align = $100, define=yes;

  # Areas for variables for main CPU
  ZEROPAGE:   load = ZEROPAGE, type = zp, define=yes;
  BSS:        load = BSS, type = bss, align = $100, optional=yes;
  BSS7E:      load = BSS7E, type = bss, align = $100, optional=yes;
  BSS7F:      load = BSS7F, type = bss, align = $100, optional=yes;

  # Areas for variables for sound CPU
  SPCZEROPAGE:load = SPCZEROPAGE, type=zp, optional=yes;
  SPCBSS:     load = SPCRAM, type = bss, align = $100, optional=yes;

}
